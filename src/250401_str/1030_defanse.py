# 防御性编程 #核心原则->技术手段->最佳实践
# 一.核心设计原则
# 1.最小惊讶原则:函数行为应符合函数名称,避免隐藏副作用
# 2.失效安全:当错误发生时,系统应当处于可预测错误发生状态,比如:数据库断开连接,事务回滚
# 3.鲁棒性原则:对错误输入保持宽容,对错误输出保持严格
# 二.关键技术
# 1.输入验证:一切外部输入都不可信
# 2.异常处理
# 3.断言:验证程序内部状态不用于用户输入错误,只在开发阶段使用,生产阶段禁用
# 4.防御性拷贝
# 5.幂等设计
# 三.最佳实践
# 可恢复错误:重试/降级 适用场景:网络请求超时
# 不可恢复错误:快速失败 适用场景:内存溢出
# 业务规则违规:抛出自定义异常 适用场景:无效支付金额
# 外部系统错误:熔断+隔离 适用场景:第三方api不可用
# 实现一个除法函数,防御性编程
def division_method(a, b):
    # 根据第一法则任何外部输入都不可信验证输入参数
    try:
        # 验证传入参数是否为可计算类型
        result = a / b
    except ZeroDivisionError:
        print("警告:被除数不能为0")
        return None
    except TypeError as e:
        print(f"警告:传入参数类型错误{e}")
        raise  # raise会重新抛出当前异常,阻碍捕获异常后的代码输出,慎用


division_method("5", "6")
